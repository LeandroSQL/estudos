/* modelagem Básica */

CLIENTE

NOME - CARACTER(30)
CPF - NUMERICO(11)
EMAIL - CARACTER(30)
TELEFONE - CARACTER(30)
ENDEREÇO - CARACTER(100)
SEXO - CARACTER(1)

/* PROCESSOS DE MODELAGEM*/
/* FASE 01 E FASE 02 - AD ADM DE DADOS */
MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LÓGICA - QUAQUER PROGRAMA DE MODELAGEM
/* FASE 03 DBA/ AD */
MODELAGEM FÍSICA - SCRIPTS DE BANCO

/* CRIANDO O BANCO DE DADOS */
CREATE DATABASE EXEMPLO;

CREATE DATABASE PROJETO;

/*CONECTANDO-SE AO BANCO */
 USE PROJETO; PARA MUDAR DE BANCO
 
 /* CRIANDO A TABELA */
 
CREATE TABLE CLIENTE(
NOME VARCHAR(50),
SEXO CHAR(1),
EMAIL VARCHAR(30),
CPF INT(11),
TELEFONE VARCHAR(30),
ENDERECO VARCHAR(100)
);
 
 
 /* COLOCANDO AS COLUNAS */
 insert into CLIENTE  VALUES('LEANDRO','M','LEANDRO@GMAIL',878797468,'2135468745','SANTA SOFIA - JD ANGELA - SAO PAULO - SP');

 
 INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/* FORMA 02 - COLOCANDO AS COLUNAS */

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 03 - INSERT COMPACTO - SOMENTE MYSQL */

INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');
						  
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',99999999999);

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('CLARA','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','883665843',22222222222);

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE SEXO = 'F';

SELECT NOME, SEXO, ENDERECO
FROM CLIENTE
WHERE ENDERECO LIKE '%SP';

CREATE DATABASE LIVRARIA

CREATE DATABASE LIVROS

CREATE TABLE LIVROS (
LIVRO VARCHAR(100),
AUTOR VARCHAR (100),
SEXO CHAR(1),
PAGINAS INT(5),
EDITORA VARCHAR(30),
VALOR FLOAT (10,2),
UF CHAR (2),
ANO INT (4)

);

INSERT INTO LIVROS VALUES ('CAVALEIRO REAL','ANA CALUDIA','F',465,'ATLAS',49,9,'RJ',2009);
INSERT INTO LIVROS VALUES ('SQL PARA LEIGOS','JOÃO NUNES','M',450,'ADDISON',98,'SP',2018);
INSERT INTO LIVROS VALUES ('RECEITAS CASEIRAS','CELIA TAVARES','F',210,'ATLAS',45,'RJ',2008);
INSERT INTO LIVROS VALUES ('PESSOAS EFETIVAS','EDUARDO SANTOS','M',390,'BETA',78,'RJ',2018);
INSERT INTO LIVROS VALUES ('HABITOS SAUDÁVEIS','EDUARDO SANTOS','M',630,'BETA',150,'RJ',2019);
INSERT INTO LIVROS VALUES ('A CASA MARROM','HERMES MACEDO','M',250,'BUBBA',60,'MG',2016);
INSERT INTO LIVROS VALUES ('ESTACIO QUERIDO','GERALDO FRANCISCO','M',310,'INSIGINIA',100,'ES',2015);
INSERT INTO LIVROS VALUES ('PRA SEMPRE AMIGAS','LEDA SILVA','F',200,'LARSON',130,'RS',2018);
INSERT INTO LIVROS VALUES ('O PODER DA MENTE','CLARA MARA','F',120,'CONTINENTAL',56,'SP',2017);

SELECT LIVRO, EDITORA
FROM LIVROS;

SELECT SEXO, UF
FROM LIVROS
WHERE UF IN ('SP','RJ');

OU

SELECT AUTOR, SEXO, UF
FROM LIVROS
WHERE SEXO = 'M'
AND UF = 'SP'
OR UF = 'RJ';

SELECT AUTOR, SEXO, UF, PAGINAS
FROM LIVROS
WHERE SEXO ='M'
AND UF = 'SP'
AND PAGINAS > 100;




/* exercicios funcionarios */
1) select NOME
from funcionarios
/* where departamento = 'filmes' or 'roupas' errado + ou - */

select count(*), departamento from  funcionarios
group by departamento
order by 1;

-- 21 filmes 53 roupas
-- como estamos com trabalhando com "or" e a segunda condição é opcional
-- colocamos na primeira condição quem tem mais chances de uma saida
--verdadeira, pois a segunda condição não será checada nesse caso.

select * from funcionarios
where departamento = 'roupas'
or departamento = 'filmes';

select count(*), departamento
from funcionarios
group by departamento
order by 1;

2) select nome, EMAIL
from funcionarios
where departamento = 'filmes' or 'lar'

-- pra contar e analisar as colunas, vimos que feminino tem 491
select count(*), SEXO 
from funcionarios
group by sexo;

-- lar 52 filmes 21
select count(*),  departamento 
from funcionarios
group by departamento
order by 1;

 select sexo,email,departamento from funcionarios
 where 
 (departamento = 'Lar' AND SEXO = 'Feminino')
 OR
 (departamento = 'filmes' and sexo = 'feminino')
 order by departamento desc;
 




3) select nome, sexo, departamento
from funcionarios
where departamento = 'Jardim'
and sexo = 'feminino';


select sexo 
from funcionarios
where sexo = 'masculino'
group by departamento
limit 10;

select count(*), SEXO
from funcionarios
where sexo = 'masculino';


select count(*), departamento
from funcionarios
where departamento = 'Jardim';

--484 masculino e jarim 47

select nome, SEXO,departamento
from funcionarios
where sexo = 'masclino'
or departamento = 'Jardim';

-----------------------------------
FILTRANO VALORES NULOS

select nome,sexo,ENDERECO
from CLIENTE
where email = 'null';  -- esta forma esta errada

select nome,sexo,ENDERECO
from CLIENTE
where email is null;   --- para trazer os nulos

select nome,sexo,ENDERECO
from CLIENTE
where email is not null;   ---- para que não mostre os nulos

-- ultiizado o update para atualiar os VALORES

select nome,EMAIL
from CLIENTE
update CLIENTE   ----assim ele vai mudar de todos
set email = 'lilian@pegpese.com';

select * from CLIENTE
update CLIENTE/
set email = 'lilian@pegpese.com'
where nome = 'LILIAN'; 

update CLIENTE -----------------colocar update e o nome da tabela
set email = 'jorge@pegpese.com.br' --- set = mudar e a informação que vai mudar
where nome = 'Jorge'; -- wher = a onde que vai mudar + o nome da coluna.

insert CLIENTE into VALUES('LEANDRO','M','LEANDRO@GMAIL',8787974687,'2135468745','SANTA SOFIA - JD ANGELA - SAO PAULO - SP');
insert CLIENTE into VALUES('LEANDRO','M','LEANDRO@GMAIL',8887974687,'2135468745','SANTA SOFIA - JD ANGELA - SAO PAULO - SP');

------ USANDO O DELETE

SELECT COUNT(*) FROM CLIENTE
WHERE NOME = 'ANA';

DELETE FROM CLIENTE
WHERE NOME = 'ANA';


INSERT INTO CLIENTE VALUES('LEANDRO','M','LEANDROF@HOTMAIL',12354568,'4865387497','SANTA CATARINA - MINAS GERAIS - MG');
INSERT  INTO CLIENTE VALUES ('JOAO','M','JOAO@IG.COM',NULL,'1234567894','SANTA SOFIA - JD ANGELA - SAO PAULO - SP');
SELECT * FROM CLIENTE
WHERE NOME = 'LEANDRO'

SELECT * FROM CLIENTE
WHERE NOME = 'JOAO'
AND EMAIL = 'LEANDROF@HOTMAIL';

DELETE FROM CLIENTE
WHERE NOME = 'LEANDRO FERREIRA'
AND EMAIL = 'LEANDROF@HOTMAIL';

select * from CLIENTE
where nome = CARLA
or email = 'lilian@gmail.com' --- OR TRAZ TODO MUNDO COM PELO MENOS UMA DAS DUAS CONDICOES

SELECT * FROM CLIENTE
WHERE NOME = 'CARLA'
AND EMAIL = 'LILIAN@GMAIL.COM';--- AND TRAZ APENAS O REGISTRO QUE SATISFACA AS DUAS CONDICOES

--ATUALIZAR O CPF DO JOAO PARA 35353535

UPDATE CLIENTE
SET CPF = '35353535'
WHERE NOME = 'JOAO'

SELECT NOME, CPF
FROM CLIENTE
WHERE EMAIL IS NULL;

DELETE FROM CLIENTE
WHERE EMAIL = 'JOAO@IG.COM';

INSERT INTO CLIENTE VALUES ('MARIA','F',NULL,NULL,NULL,NULL);

--MODELAGEM
---PRIMEIRA FORMA NORMAL
/*

*/
CRATE DATABASE COMERCIO;


 

CREATE TABLE ENDERECO(
IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
RUA VARCHAR(30) NOT NULL,
BAIRRO VARCHAR(30) NOT NULL,
CIDADE VARCHAR (30) NOT NULL,
ESTADO CHAR(2) NOT NULL,
ID_CLIENTE INT UNIQUE,

FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE(

IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
TIPO ENUM('RES','COM','CEL') NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
ID_CLIENTE INT,

FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTE (IDCLIENTE)

);

/* FK CHAVES ESTRANGEIRAS É A CHAVE PRIMARIA DE UMA TABELA QUE VAI ATÉ A OUTRA PARA FAZER REFERENCIA ENTRE REGISTROS

/* EM RELACIONAMENTO 1X1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA /*

EM RELACIONAMENTO DE 1XN A CHAVE ESTRANGEIRA VAI FICAR NA TABELA N*/

/* DROP TABLE + NOME DA TABELA PARA APAGAR */

/* desc CLIENTE PARA VER A DESCRIÇÃO DA TABELA */


INSERT INTO CLIENTE VALUES (NULL,'LEANDRO','M','LEANDRO@IG.COM','7894567895');
INSERT INTO CLIENTE VALUES (NULL,'CARLOS','M','CARLOS@GMAIL.COM','7894561239');
INSERT INTO CLIENTE VALUES (NULL,'ANA','F','ANA@PEGPSE.COM','5555555555');
INSERT INTO CLIENTE VALUES (NULL,'CLARA','F',NULL,'9999999999');
INSERT INTO CLIENTE VALUES (NULL,'JORGE','M','JORGE@HOTMAIL.COM','2222222222');
INSERT INTO CLIENTE VALUES (NULL,'CELIA','F','CELIA@IG.COM','8888888888');


INSERT INTO ENDERECO VALUES (NULL,'SANTA SOFIA','JD ANGELA','SAO PAULO','SP',1);
INSERT INTO ENDERECO VALUES (NULL,'CAPITAO HERMES','CENTRO','B. HORIZONTE','MG',2);
INSERT INTO ENDERECO VALUES (NULL,'PRES VARGAS','AV INTERLAGOS','SAO PAULO','SP',3);
INSERT INTO ENDERECO VALUES (NULL,'ALFANDEGA','ESTACIO','RIO DE JANEIRO','RJ',4);
INSERT INTO ENDERECO VALUES (NULL,'ALFANDEGA','VASCO','RIO DE JANEIRO','RJ',5);
INSERT INTO ENDERECO VALUES (NULL,'OUVIDOR','CENTRO','VITORIA','ES',6);


INSERT INTO TELEFONE VALUES(NULL,'CEL','78945612',5);
INSERT INTO TELEFONE VALUES(NULL,'RES','879491952',5);
INSERT INTO TELEFONE VALUES(NULL,'CEL','19165152',1);
INSERT INTO TELEFONE VALUES(NULL,'COM','191465487',2);
INSERT INTO TELEFONE VALUES(NULL,'RES','164548979',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','15616578',3);
INSERT INTO TELEFONE VALUES(NULL,'COM','889595959',3);
INSERT INTO TELEFONE VALUES(NULL,'RES','456987484',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','78787878',5);
INSERT INTO TELEFONE VALUES(NULL,'CEL','12121212',2);
INSERT INTO TELEFONE VALUES(NULL,'CEL',NULL,2);
INSERT INTO TELEFONE VALUES(NULL,'CEL',NULL,1);


--------------------------------------------------------------PROCEDURE

DELIMITER #

CREATE PROCEDURE CLIENTE()
BEGIN



END
#


/* SELECAO. PROJECAO E JUNCAO*/
/* PROJECAO É TUDO QUE VC QUER VER NA TELA
SELECT NOW() AS DATA_ATUAL;
SELECT 2+2 AS SOMA

/*SELECAO É UMA SUBCONJUNTO DO CONJUNTO TOTAL DE REGISTROS DE UMA TABELA

SELECT NOME, SEXO,email
FROM CLIENTE
WHERE SEXO = 'F'

SELECT NUMERO
FROM TELEFONE
WHERE TIPO = 'CEL';*/

 SELECT NOME,EMAIL,IDCLIENTE
 FROM CLIENTE;
 
 SELECT ID_CLIENTE, BAIRRO, CIDADE
 FROM ENDERECO;
 
 /* JOIN*/
 
 SELECT NOME,SEXO,EMAIL,TIPO,NUMERO
 FROM CLIENTE
 JOIN  TELEFONE
 ON IDCLIENTE =ID_CLIENTE
 
 
 /* NOME, SEXO,BAIRRO,CIDADE,TIPO,NUMERO*/
 
 SELECT CL.NOME, CL.SEXO,EN.BAIRRO,EN.CIDADE,TE.TIPO,TE.NUMERO
 FROM CLIENTE CL
 JOIN TELEFONE TE
 ON IDCLIENTE =ID_CLIENTE
 JOIN ENDERECO EN
 ON ID_CLIENTE=IDCLIENTE
 
 
 
 
 SELECT CL.NOME, CL.SEXO,EN.BAIRRO,EN.CIDADE,TE.TIPO,TE.NUMERO
 FROM CLIENTE CL
 JOIN TELEFONE TE
 ON CL.IDCLIENTE =TE.ID_CLIENTE
 JOIN ENDERECO EN
 ON CL.IDCLIENTE = EN.ID_CLIENTE
WHERE CIDADE = 'SAO PAULO'


/*
     DML - DATA MANIPULATION LANGUAGE
	 DCL - DATA DEFINITION LANGUAGE
	 DCL - DATA CONTROL LANGUAGE
	 TCL - TRANSACTION CONTROL LANGUAGE
	 

*/
/*
FILTROS 
SELECT * FROM CLIENTE
WHERE SEXO = 'M';
*/
/*
update
SELECT * FROM CLIENTE 
WHERE IDCLIENTE =7;

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 7;
/*
/*
DELETE

INSERT INTO CLIENTE VALUES(NUL,'XXX','M',NULL,'XXX');

SELECT * FROM CLIENTE
WHERE IDCLIENTE =7;

DELETE FROM CLIENTE
WHERE IDCLIETE =7;
*/

 MODIFICANDO TABELAS

DDL -DATA DEFINITION LANGUAGE

CREATE TBALE PRODUTO(
PRODUTO INT PRIMARY KEY AUTO_INCREMENT,
NOME_PRODUTO VARCHAR(30) NOT NULL,
PRECO INT,
FRETE FLOAT(10,2) NOT NULL
);


/* ALTER TABLE */

/* ALTERANDO O NOME DE UMA COLUNA -CHANGE */

ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO INT NOT NULL; -- MELHOR PARA MUDAR O NOME DA COLUNA

ALTER TABLE PRODUTO
CHANGE VALOR_UNITARIO  VALOR_UNITARIO INT;

/* MODIFY ALTERANDO O TIPO*/
ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL; --MELHOR PARA MUDAR TIPO

/* ADICIONANDO COLUNAS */

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL; -- PARA ADICIONAR UMA COLUNA

/* APAGANDO UMA COLUNA*/

ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* ADICIONANDO UMA COLUNA NA ORDEM ESPECIFICA*/
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT (10,2) NOT null
AFTER NOME_PRODUTO;

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT (10,2) NOT null
FIRST;

                                                             /* CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UA TABELA QUE VAI ATÉ A OUTRA TABELA PARA FAZER REFERENCIA ENTRE REGISTROS 
															 EM RELACIONAMENTO 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA
															 EM RELACIONAMSENTO 1 X N A CHAVE ESTRANGEIRA  FICARA NA TABELA N
															 
															 
															 

-- EU QUE FIZ ERRADO

SELECT CL.IDCLIENTE, CL.EMAIL,CL.NOME,EN.BAIRRO,EN.CIDADE,T.TIPO
FROM CLIENTE CL
JOIN ENDERECO EN
ON CL.IDCLIENTE =EN.ID_CLIENTE
JOIN TELEFONE T
ON CL.IDCLIENTE =T.ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO' AND CIDADE = 'RIO DE JANEIRO'


 -- MOSTRAR TODOOS OS CAMPOS 
SELECT CL.IDCLIENTE,CL.NOME,CL.SEXO,CL.EMAIL,CL.CPF,
EN.RUA,EN.BAIRRO,EN.CIDADE,EN.ESTADO,
T.TIPO,T.NUMERO
FROM CLIENTE CL
JOIN TELEFONE T
ON CL.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO EN
ON CL.IDCLIENTE = EN.ID_CLIENTE

/* RELATORIO DE HOMENS */
SELECT CL.IDCLIENTE,CL.NOME,CL.SEXO,CL.EMAIL,CL.CPF,
EN.RUA,EN.BAIRRO,EN.CIDADE,EN.ESTADO,
T.TIPO,T.NUMERO
FROM CLIENTE CL
JOIN TELEFONE T
ON CL.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO EN
ON CL.IDCLIENTE = EN.ID_CLIENTE
WHERE SEXO = 'M'

/*11,12,13,17,18*/
SELECT UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE IN (11,12,13,17,18)


-- CONTANDO OS SEXOS
SELECT count(*) AS QUANTIDADE, SEXO
FROM CLIENTE
group by SEXO

SELECT C.IDCLIENTE,C.EMAIL,E.BAIRRO, E.CIDADE
FROM CLIENTE C
JOIN ENDERECO E
ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO'
AND CIDADE = 'RIO DE JANEIRO'


SELECT C.NOME,C.EMAIL,T.NUMERO AS CELULAR /*PROJECAO*/
FROM CLIENTE C /* ORIGEM */
JOIN TELEFONE T /* JUNCAO */
ON C.IDCLIENTE = T.ID_CLIENTE /* JUNCAO CONDICAO */
JOIN ENDERECO E /* JUNCAO */
ON C.IDCLIENTE = E.ID_CLIENTE /* JUNCAO CONDICAO */
WHERE TIPO = 'CEL' AND ESTADO = 'RJ' /*SELECAO*/

SELECT C.NOME,C.EMAIL,T.NUMERO,E.ESTADO
FROM CLIENTE C
JOIN TELEFONE T
 ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE

/* IFNULL */
SELECT C.NOME,IFNULL(C.EMAIL,'NÃO TEM EMAIL') AS EMAIL,T.NUMERO,E.ESTADO -- USAMOS O IFNULL() PARA NÃO TRAZER AS INFORMAÇÕES NULAS E AINDA PODEMOS ESCREVER QUALQUER COISA DENTRO DELA.
FROM CLIENTE C                                ----------------------------- NO CASO AQUI SE USA IFNULL(C.EMAIL,'QUALQUER COISA')
JOIN TELEFONE T
 ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE

/* VIEWS */

SELECT C.NOME,C.SEXO,C.EMAIL,T.TIPO,T.NUMERO,E.BAIRRO,E.CIDADE,ESTADO
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE

CREATE VIEW RELATORIO AS --ASSIM QUE SE FAZ UMA VIEW
SELECT C.NOME,C.SEXO,C.EMAIL,T.TIPO,T.NUMERO,E.BAIRRO,E.CIDADE,ESTADO
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

/* APAGANDO UMA VIEW */

DROP VIEW RELATORIO

/*INSERINDO UM PREFIXO */

CREATE VIEW V_RELATORIO AS -- ASSIM É MELHOR PRA SABER SE É UMA VIEW
SELECT C.NOME,C.SEXO,IFNULL(C.EMAIL,'NÃO TEM EMAIL')AS E-MAIL,T.TIPO,T.NUMERO,E.BAIRRO,E.CIDADE,ESTADO
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

SELECT NOME,SEXO,ESTADO,TIPO ----ASSIM PODEMOS FAZER UMA PROJEÇÃO DAS COLUNAS SEM TER QUE ESCREVER A QUEY TODA, BASTA POR O SELECT+AS COLUNAS QUE VC QUER+FROM O NOME DA VIEW 
FROM V_RELATORIO 

/* DML* UPDATE,INSERT E DELETE - DML */
INSERT INTO V_RELATORIO VALUES ('ANDREIA','F','ANDREIA@UOL.COM.BR','CEL','87688998','CENTRO','VIROTORIA','ES');

/* É PERMITIDO FAZER UPDATES EM VIEWS COM JOIN */

/* ORDER BY */

CREATE TABLE ALUNOS(
NUMERO  INT,
NOME VARCHAR(30)
);


INSERT INTO ALUNOS VALUES(1,'JOAO');
INSERT INTO ALUNOS VALUES(1,'MARIA');
INSERT INTO ALUNOS VALUES(2,'ZOE');
INSERT INTO ALUNOS VALUES(2,'ANDRE');
INSERT INTO ALUNOS VALUES(3,'CLARA');
INSERT INTO ALUNOS VALUES(1,'CLARA');
INSERT INTO ALUNOS VALUES(5,'LEANDRO');
INSERT INTO ALUNOS VALUES(1,'JANAINA');
INSERT INTO ALUNOS VALUES(3,'MARCELO');
INSERT INTO ALUNOS VALUES(4,'GIOVANI');
INSERT INTO ALUNOS VALUES(5,'ANTONIO');
INSERT INTO ALUNOS VALUES(6,'ANA');
INSERT INTO ALUNOS VALUES(6,'VIVIANE');

SELECT * FROM ALUNOS
ORDER BY NUMERO;

SELECT * FROM ALUNOS
ORDER BY 1; --- AQUI É O NUMERO DA COLUNA NO CASO É A QUE TEM NUMERO


SELECT * FROM ALUNOS
ORDER BY 2; ---- AQUI JÁ ORDENOU POR NOME, POIS A COLUNA É A DE NUMERO 2

/* ORDENANDO MAIS DE UMA COLUNA */
SELECT * FROM ALUNOS
ORDER BY NUMERO, NOME;

SELECT * FROM ALUNOS
ORDER BY 1,2;

/* MESCLANDO ORDER BY COM PROJECAO */

SELECT NOME FROM ALUNOS
ORDER BY 1,2; ------- O BANCO NÃO RECONHECE, POIS PRA ELE TEM MAIS COLUNAS A SER MOSTRADAS NA PROJECAO

SELECT NOME FROM ALUNOS ------ AQUI O BANCO JÁ RECONHECE, MELHOR POR NOME
ORDER BY NUMERO,NOME; 

/* ORDER BY DESC / ASC */

SELECT * FROM ALUNOS
ORDER BY 1 DESC;  -----DECRECENTE

SELECT * FROM ALUNOS
ORDER BY 1 ASC; ACRECENTE

SELECT * FROM ALUNOS
ORDER BY 1,2 DESC;

SELECT * FROM ALUNOS
ORDER BY 1, DESC, 2 DESC;    



SELECT C.NOME,C.SEXO,C.EMAIL,T.TIPO,T.NUMERO,E.BAIRRO,E.CIDADE,ESTADO
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
ORDER BY 1;

SELECT * FROM V_RELATORIO
ORDER BY 1; ---- TAMBÉM SERVE EM VIEW

/* DELIMITADOR */
 DELEMITER $ --PARA MUDAR O DELIMITADOR DE ; PARA O $
 STATUS ---- PARA MOSTRAR QUAL O DELIMITADOR ESTAMOS USANDO E OUTRAS INFORMAÇÕES
 /*STORED PROCEDURES */
 
 SELECT 'LEANDRO'; ---- BLOCO ANONIMO
 
 DELEMITER $
 
 
 CREATE PROCEDURE NOME()
 BEGIN
 
 
 QUALQUER PROGRAMACAO; --- POIS TODA LINHA DE PROGRAMAÇÃO TERMINA EM ; POR ISSO DEVEMOS SEMPRE MUDAR O DELIMITADOR 
 and
 $
 
 CREATE PROCEDURE NOME(EMPRESA)
 BEGIN
 
 SELECT 'UNIVERSIDADE DOS DADOS' AS EMPRESA;
 and
 $
 
 /* CHAMANDO UMA PROCEDURE */
CALL NOME_EMPRESA()$

/* PROCEDURES COM PARAMETROS */

 CREATE PROCEDURE CONTA()
 BEGIN 
 
 SELECT 10+10 AS CONTA;
 END
 $
 
 CALL CONTA ()$
 
 DROP PROCEDURE CONTA; --- PARA APAGAR
 
 DELEMITER $
 
 CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
 BEGIN 
 
 SELECT NUMERO1 + NUMERO2 AS CONTA;
 END
 $
 
 
 
 /*PROCEDURES */
 
 CREATE DATABASE PROJETO;

USE PROJETO;
 
 CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);
 
INSERT INTO CURSOS VALUES(NULL,'JAVA',30,500.00);
INSERT INTO CURSOS VALUES(NULL,'FUNDAMENTOS DE BANCOS DE DADOS',40,700.00);

SELECT * FROM CURSOS;

DELIMITER #

STATUS

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),
						   P_HORAS INT(30),
						   P_PRECO  FLOAT(10,2))
BEGIN
	
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);

END
#

DELIMITER ;

CALL CAD_CURSO('BI SQL SERVER',35,3000.00);
CALL CAD_CURSO('POWER BI',20,1000.00);
CALL CAD_CURSO('TABLEAU',30,1200.00);
   
   /* CRIAR UMA PROCEDURE PARA CONSULTAR CURSOS*/
   
  DELIMITER #
  
  CREATE PROCEDURE LE_CURSO(P_IDCURSO INT)
  BEGIN
   SELECT NOME,HORAS,PRECO FROM CURSOS
   WHERE IDCURSO = P_IDCURSO;
  END
  #
  
  DELIMITER #
  
  CREATE PROCEDURE LE_CURSOS( P_IDCURSO INT)
  BEGIN
  
    SELECT NOME,HORAS,VALOR FROM CURSOS
	WHERE IDCURSO = P_IDCURSO;
  
  END
  #
  
  
 CALL LE_CURSO('1','2');
 
 ------------------------------ exercicios
 create table funcionarios
  (
      idFuncionario INT PRIMARY KEY AUTO_INCREMENT,
      nome varchar(100) NOT NULL,
      email varchar(200) NOT NULL,
      sexo varchar(10),
      departamento varchar(100) NOT NULL,
      admissao varchar(10),
      salario integer,
      cargo varchar(100),
      idRegiao int
  );
  
   DELIMITER #
  CREATE PROCEDURE CAD_FUNCIONARIO(P_nome varchar(100),P_email varchar(200),P_sexo varchar(10),P_departamento varchar(100),P_admissao varchar(10),P_salario integer,P_cargo varchar(100),P_idRegiao int)
  BEGIN
  
           INSERT INTO FUNCIONARIOS VALUES(NULL,P_NOME,P_EMAIL,P_SEXO,P_DEPARTAMENTO,P_ADMISSAO,P_SALARIO,P_CARGO,P_IDREGIAO);
  END
  #
  
  
  CALL CAD_FUNCIONARIO('ERIKA','ERIKA@PEGPESE','F','MARKETING','25/08/2020',1900,'ATENDENTE',2);
   CALL CAD_FUNCIONARIO('GIOVANA','GIOVANA@PEGPESE','F','FISCAL','02/07/2018',2500,'FISCAL',3);
    CALL CAD_FUNCIONARIO('VINICIOS','VINI@PEGPESE','M','TI','07/05/2022',2570,'ANALISTA',1);
	 CALL CAD_FUNCIONARIO('GUILHERME','GUI@PEGPESE','M','TI','29/03/2019',3000,'ANALISTA',1);
	  CALL CAD_FUNCIONARIO('PAULO','PAULO@PEGPESE','M','MARKETING','30/01/2020',2700,'ATENDENTE',2);
	   CALL CAD_FUNCIONARIO('GEAN','GEAN@PEGPESE','M','PREVENCAO','10/11/2017',2660,'PREVENCAO',4);
	    CALL CAD_FUNCIONARIO('ADRIANA','ADRIANA@PEGPESE','F','PREVENCAO','06/02/2019',2100,'PREVENCAO',4);
		 CALL CAD_FUNCIONARIO('RAMON','RAMON@PEGPESE','M','TI','31/01/2017',3500,'ANALISTA',1);
		  CALL CAD_FUNCIONARIO('JONATAS','JONATAS@PEGPESE','M','TI','04/04/2019',2600,'PROGRAMASAO',1);
		   CALL CAD_FUNCIONARIO('HYGOR','HYGOR@PEGPESE','M','TI','28/09/2020',3000,'PROGRAMASAO',1);
		   
		   
		   DELIMITER #
		   CREATE PROCEDURE LE_FUNCIONARIO(P_IDFUNCIONARIO INT)
		   BEGIN
		   
		             SELECT NOME,EMAIL,SEXO,DEPARTAMENTO,ADMISSAO,SALARIO,CARGO,idRegiao FROM FUNCIONARIOS
					 WHERE IDFUNCIONARIO = P_IDFUNCIONARIO;
				
			
		   END
		   #
		   
		   CALL LE_FUNCIONARIO();
		   
		   
		   DELIMITER #
CREATE PROCEDURE LE_FUNCIONARIO(P_IDREGIAO INT))
BEGIN

SELECT * FROM FUNCIONARIOS
 WHERE IDREGIAO = P_IDREGIAO; 
 
END
#



DELIMITER #

CREATE PROCEDURE LE_FUNCIONARIO(P_NOME VARCHAR(100))
BEGIN
    SELECT * FROM FUNCIONARIOS WHERE NOME = P_NOME;
END#

DELIMITER ;

CALL LE_FUNCIONARIO(ERIKA);

---- PARA FAZER ALTERAÇÕES NO BANCO

SET SQL_SAFE_UPDATES = 0;
-- Insert your script



UPDATE FUNCIONARIOS
SET CARGO = 'FISCAL'
WHERE IDREGIAO = 3

CREATE PROCEDURE LE_CLIENTE(P_IDCLIENTE INT,P_NOME VARCHAR (100),P_CPF INT,P_TIPO VARCHAR(100),P_NUMERO INT,P_CIDADE VARCHAR(100),P_ESTADO VARCHAR(50))
BEGIN
 SELECT C.IDCLIENTE,C.NOME,C.CPF,T.TIPO,T.NUMERO,E.CIDADE,E.ESTADO
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE  C.IDCLIENTE = P_IDCLIENTE
END#
     






CREATE PROCEDURE LE_CLIENTE(P_IDCLIENTE INT,P_NOME VARCHAR (100),P_CPF INT,P_TIPO VARCHAR(100),P_NUMERO INT,P_CIDADE VARCHAR(100),P_ESTADO VARCHAR(50))
BEGIN
 SELECT C.IDCLIENTE,C.NOME,C.CPF,T.TIPO,T.NUMERO,E.CIDADE,E.ESTADO;
FROM CLIENTE C
JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
      
END#


/* FUNCOES DE AGREGACAO NUMERICAS */

CREATE TABLE VENDEDORES(

IDVENDEDOR INT PRIMMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
SEXO CHAR (1),
JANEIRO FLOAT(10.2),
FEVEREIRO FLOAT (10,2),
MARCIO FLOAT (10,2)
);


INSERT INTO VENDEDORES VALUES (NULL,'CARLOS','M','545454.55',88346.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'MARIA','F','454545.45',456456.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'ANTONIO','M','121212.12',454545.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'CLARA','F','565656.56',784489.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'ANDERSON','M','77777.77',121354.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'RONI','M','8888.88',454515.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'LEANDRO','M','9999.99',789456.87,7753.90);
INSERT INTO VENDEDORES VALUES (NULL,'CELIA','F','101010.10',124567.87,7753.90);


/* FUNCAO MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA */

SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

SELECT MIN(FEVEREIRO) AS MENOR_FEV
FROM VENDEDORES;

/* FUNCAO AVG - TRAZ O MEDIA DE UMA COLUNA */
SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDORES;

/* VARIA FUNCOES*/

SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
AVG(JANEIRO) AS MEDIA_JAN
FROM VENDEDORES;

/*TRUNCATE*/
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
 TRUNCATE (AVG(JANEIRO),2) AS MEDIA_JAN
FROM VENDEDORES;

/* A30 AGREGANDO COM SUM() */

SELECT SUM (JANEIRO) AS TOTAL_JAN,
SUM (FEVEREIRO) AS TOTAL_FEV,
SUM(MARCO AS TOTAL_MAR)
FROM VENDEDOR;

/* VENDAS POR sexo*/

SELECT SEXO,SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;

SELECT NOME,MIN(MARCO) AS MIN_MARCO
FROM VENDEDORES
GROUP BY NOME;

----------------------------------------------------------------/*SUBQUERES*


----------------------------------------------------------------/* QUEM VENDEU MAIS*/
SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

-----------------------------------------------------------------/* QUEM VENDEU MENOS*/
SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES); 



------------------------------------------------------------------/* MENDIA DE VENDA*/
SELECT NOME, MARCO 	
FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT NOME, FEVEREIRO 	
FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

--------------------------------------------------------------------/* OPERACOES EM LINHA */

SELECT NOME,JANEIRO, FEVEREIRO, MARCO,
(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO) /3,2) AS "MEDIA"
FROM VENDEDORES;

/*APLICANDO UM % */
SELECT NOME,JANEIRO, FEVEREIRO, MARCO,
(JANEIRO+FEVEREIRO+MARCO) * .25  AS "DESCONTO",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO) /3,2) AS "MEDIA"
FROM VENDEDORES;

SELECT NOME,JANEIRO, FEVEREIRO, MARCO,
TRUNCATE((JANEIRO+FEVEREIRO+MARCO),2) AS "TOTAL",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO) *.25,2) AS "DESCONTO",
TRUNCATE((JANEIRO+FEVEREIRO+MARCO) /3,2) AS "MEDIA"
FROM VENDEDORES;


/* ALTERANDO TABELAS */

CREATE TABLE TABELA(
 COLUNA1 VARCHAR(30),
 COLUNA2 VARCHAR(30),
 COLUNA3 VARCHAR(30)

);

ALTER TABLE tabela
ADD PRIMARY KEY (COLUNA1);

DESC TABELA;

/--------------------------------------------------------------------------------------------------------ADICIONANDO UMA COLUNA COM POSIÇÃO
ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

----------------------------------------------------------------------------------------------------------RENOMEANDO O NOME DA tabela

ALTER TABLE tabela
RENAME PESSOA;

CREATE TABLE TIME(
IDTIME INT PRIMARY KEY AUTO_INCREMENT,
TIME VARCHAR(30),
ID_PESSOA VARCHAR(30)
);

ALTER TABLE TIME
ADD FOREIGN KEY (ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

------------------------------------------------------------------------------PARA MOSTRAR MAIS DETALHADO A TABELA;
SHOW CREATE TABLE TIME;

-------------------------------------------------------------------------------FOREIGN KEY
ALTER TABLE TIME 
ADD FOREIGN KEY (ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

-----------------------------------------------------------------------------------VERIFICANDO AS CHAVES
SHOW CREATE TABLE TIME;

-----------------------------------------------------------------------------------ORGANIZAÇÃO DE CHAVES - CONSTRANT (REGRA)

 CREATE TABLE JOGADOR(
 IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
 NOME VARCHAR(30)
 );
 
 CREATE TABLE TIMES(
 IDTIME INT PRIMARY KEY AUTO_INCREMENT,
 NOMETIME VARCHAR(30),
 ID_JOGADOR INT,
 FOREIGN KEY (ID_JOGADOR)
 REFERENCES JOGADOR(IDJOGADOR)
 
 );
 
 INSERT INTO JOGADOR VALUES(NULL,'GUERREIRO');
 INSERT INTO TIMES VALUES(NULL,'VARMENGO',1)
 
 CREATE TABLE CLIENTE (
 IDCLIENTE INT,
 NOME VARCHAR(30)
 );
 
CREATE TABLE TELEFONE(
IDTELEFONE INT,
TIPO CHAR(3) NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE); 

SHOW CREATE TABLE TELEFONE;

--------------------------------------------------------------------------- DICIONARIOS DE DADOS

USE INFORMATION_SCHEMA;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
TABLE_NAME AS "TABELA",
CONSTRAINT_TYPE AS "TIPO"
FROM TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

----------------------------------------------------------- exercicios
CREATE DATABASE PROJETO;

CREATE TABLE CLIENTE(
IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),NOT NULL,
SEXO ENUM('M','F') NOT NULL,
ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
 IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
 TIPO ENUM ('CEL','RES','COM')NOT NULL,
 NUMERO VARCHAR(30)NOT NULL,
 ID_CLIENTE INT
);

CREATE TABLE MARCA(
IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
MARCA VARCHAR(30) UNIQUE,

);

CREATE TABLE CARRO(
IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
MODELO VARCHAR(30) NOT NULL,
PLACA VARCHAR(30) NOT NULL UNIQUE,
ID_MARCA INT
);

CREATE TABLE CARRO_COR(
  ID_CARRO INT,
  ID_COR INT,
  PRIMARY KEY (ID_CARRO,ID_COR)
);

/*COSTRAINTS */

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY (ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY (ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY (ID_COR);
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY (ID_CARRO)
REFERENCES CARRO(IDCARRO);

----------------------------------------------------PREENCHENDO O BANCO
INSERT INTO CARRO VALUES (NULL,'SEDAM','ABCD-123')


/* CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UMA TABELA QUE VAI ATÉ A OUTRA PARA REFERENCIA ENTRE REGISTROS

EM RELACIONAMENTOS DE 1 X 1 A CHAVE FICA NA TABELA MAIS FRACA (DEPENDA DA REGRA DE NEGOCIO)
EM RELACIONAMENTOS DE 1 X N A CHAVE ESTRANGEIRA A MESMA FICARÁ NA TABELA N CARDINALIDADE N*/

-------------------------CLIENTE-----------
CREATE TABLE CLIENTE(
    ID CLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30) NOT NULL,
	CPF  VARCHAR (10) UNIQUE,
	SEXO ENUM ('F','M') NOT NULL,
	EMAIL VARCHAR (30)UNIQUE
	);
	
	CREATE TABLE CARRO (
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR (30) NOT NULL,
	PLACA VARCHAR (20) NOT NULL UNIQUE,
	CHASSI INT (20) NOT NULL

);

CREATE TABLE MARCA (
IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE COR (
IDCOR INT PRIMARY KEY AUTO_INCREMENT,
COR VARCHAR (20)UNIQUE
);

CREATE TABLE TELEFONE(
IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
NUMERO VARCHAR(10) NOT NULL,
TIPO ENUM ('RES','COM','CEL'),
);

CREATE TABLE CARRO_COR (
ID_CARRO INT,
ID_COR INT,
PRIMARY KEY (ID_CARRO,ID_COR)
);
----------------------------------------------PARA EXERCITAR, PROEDURE
DELIMITER #
CREATE PROCEDURE LE_CLIENTE(P_IDCLIENTE INT)
BEGIN
       SELECT C.IDCLIENTE,C.NOME,C.CPF,T.TIPO,T.NUMERO,E.ESTADO
	   FROM CLIENTE C
	   JOIN TELEFONE T
	   ON C.IDCLIENTE=T.ID_CLIENTE
	   JOIN ENDERECO E
	   ON C.IDCLIENTE=E.ID_CLIENTE
	   WHERE IDCLIENTE=P_IDCLIENTE;
END#
DELIMITER ;


DELIMITER #
CREATE PROCEDURE LE_CLIENTE2(P_ESTADO CHAR(2))
BEGIN
       SELECT C.IDCLIENTE,C.NOME,C.CPF,T.TIPO,T.NUMERO,E.ESTADO
	   FROM CLIENTE C
	   JOIN TELEFONE T
	   ON C.IDCLIENTE=T.ID_CLIENTE
	   JOIN ENDERECO E
	   ON C.IDCLIENTE=E.ID_CLIENTE
	   WHERE ESTADO=P_ESTADO;
END#
DELIMITER ;

call LE_CLIENTE2();


-----------------------------------------------------------------------OFICINA SR JOSE 

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('CEL','RES','COM') NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_CLIENTE INT 
);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30) NOT NULL,
	PLACA VARCHAR(30) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY(ID_CARRO,ID_COR)
);

/* CONSTRAINTS */

ALTER TABLE TELEFONE 
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);


ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);


ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);


ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);


ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);
 
INSERT INTO CARRO VALUES(NULL,'FUSCA','FGH-854',NULL)
INSERT INTO CARRO VALUES(NULL,'ONIX','FKYH-369',NULL)
INSERT INTO CARRO VALUES(NULL,'UNO','RIDJ-54810',NULL)
INSERT INTO CARRO VALUES(NULL,'BRASILIA','WEQ-1236',NULL)
INSERT INTO CARRO VALUES(NULL,'CELTA','LEO-4569',NULL)
INSERT INTO CARRO VALUES(NULL,'HB20','KOLA-9568',NULL)
INSERT INTO CARRO VALUES(NULL,'I30','DJHE-238',NULL)
INSERT INTO CARRO VALUES(NULL,'FERRARI','MNFD-7915',NULL)
INSERT INTO CARRO VALUES(NULL,'CORSA','AQRDS-36974',NULL)
INSERT INTO CARRO VALUES(NULL,'ONIX','LEOLEO-87897',NULL)

INSERT INTO CLIENTE (NULL,'LEANDRO','M',1);
INSERT INTO CLIENTE VALUES (NULL,'LEANDRO','M',NULL);
INSERT INTO CLIENTE VALUES (NULL,'GUI','M',NULL);
INSERT INTO CLIENTE VALUES (NULL,'VITORIA','F',NULL);
INSERT INTO CLIENTE VALUES (NULL,'ERIKA','F',NULL);
INSERT INTO CLIENTE VALUES (NULL,'SUELEN','F',NULL);
INSERT INTO CLIENTE VALUES (NULL,'PATRIC','M',NULL);
INSERT INTO CLIENTE VALUES (NULL,'GISLEIDE','F',NULL);
INSERT INTO CLIENTE VALUES (NULL,'GEAN','M',NULL);
INSERT INTO CLIENTE VALUES (NULL,'GEILMA','F',NULL);
INSERT INTO CLIENTE VALUES (NULL,'DEIVID','M',NULL);

INSERT INTO TELEFONE VALUES(NULL,'CEL',112345679,1);
INSERT INTO TELEFONE VALUES(NULL,'COM',789564314,NULL);
INSERT INTO TELEFONE VALUES(NULL,'RES',1514894912,NULL);
INSERT INTO TELEFONE VALUES(NULL,'COM',2235588897,NULL);
INSERT INTO TELEFONE VALUES(NULL,'RES',9999999999,NULL);
INSERT INTO TELEFONE VALUES(NULL,'CEL',8888888888,NULL);
INSERT INTO TELEFONE VALUES(NULL,'COM',2222222222,NULL);
INSERT INTO TELEFONE VALUES(NULL,'COM',1515151515,NULL);
INSERT INTO TELEFONE VALUES(NULL,'CEL',7777777777,NULL);
INSERT INTO TELEFONE VALUES(NULL,'RES',1230202020,NULL);
INSERT INTO TELEFONE VALUES(NULL,'CEL',7778512121,NULL);


INSERT INTO MARCA VALUES(NULL,'VOLKSWAGEN');
INSERT INTO MARCA VALUES(NULL,'CHEVROLET');
INSERT INTO MARCA VALUES(NULL,'FIAT');
INSERT INTO MARCA VALUES(NULL,'VOLKSWAGEN');
INSERT INTO MARCA VALUES(NULL,'CHEVROLET');
INSERT INTO MARCA VALUES(NULL,'HONDA');
INSERT INTO MARCA VALUES(NULL,'HONDA');
INSERT INTO MARCA VALUES(NULL,'FERRARI');
INSERT INTO MARCA VALUES(NULL,'CHEVROLET');

INSERT INTO COR VALUES(NULL,'AMARELO');
INSERT INTO COR VALUES(NULL,'VERMELHO');
INSERT INTO COR VALUES(NULL,'AZUL');
INSERT INTO COR VALUES(NULL,'PRETO');
INSERT INTO COR VALUES(NULL,'ROSA');
INSERT INTO COR VALUES(NULL,'BRANCO');
INSERT INTO COR VALUES(NULL,'MARROM');
INSERT INTO COR VALUES(NULL,'VERDE');
INSERT INTO COR VALUES(NULL,'AZUL MARINHO');
INSERT INTO COR VALUES(NULL,'LARANJA');

-----------------------------------------------------TRIGGGER
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO



END > FIM

CREATE DATABASE TRIGGERS

USE TRIGGERS


CREATE TABLE USUARIO(
IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
LOGUIN VARCHAR(30),
SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
IDUSUARIO INT,
NOME VARCHAR(30),
LOGUIN VARCHAR(30)
);
DELIMITER #
CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW 
BEGIN 
  INSERT INTO BKP_USUARIO VALUES
  (NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);


END
#

INSERT INTO USUARIO VALUES(NULL,'LEANDRO','LEANDRO2000','PALMEIRAS');

DELETE FROM USUARIO WHERE IDUSUARIO=1;



-----------------COMUNICAÇÃO DE BANCOS--- BACKUP LOGICO

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

CREATE TABLE BKP_PRODUTO(
IDBKP INT PRIMARY KEY AUTO_INCREMENT,
IDPRODUTO INT,
NOME VARCHAR(30),
VALOR FLOAT(10,2)
);

USE LOJA;

INSERT INTO BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);

END#

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO JAVA',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BACKUP',100.56);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO PROGRAMAÇÃO',100.56);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO C++',100.56);

SELECT* FROM BACKUP.BKP_PRODUTO;
---------------------------------------------2 TRIGGERS NA MESMA TABELA
DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);

END#


DELETE FROM PRODUTDO WHERE IDPORDUTO = 2;


DROP TRIGGER BACKUP_PRODUTO;

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);

END#

INSERT INTO PRODUTO VALUES(NULL,'LIVRO C#',88.10);

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1); -------- ASSIM ADICIONAMOS UMA COLUNA, E COMO 

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');

END#

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,'A');

END#

INSERT INTO PRODUTO VALUES(NULL,'LIVRO TESTE',55.56,'A');


---------------------------------------TRIGGER DE AUDITORIA,PARA SABER QUANDO UM PRODUTO FOI DELETADO QUANDO DOI ALTERADO, O PREÇO DOS PRODUTOS.

DROP DATABASE LOJA;
DROP DATABASE BACKUP;

CREATE DATABASE LOJA;



CREATE TABLE PRODUTO(
IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
VALOR FLOAT(10,2)
);

CREATE TABLE BACKUP_PRODUTO

CREATE TABLE BKP_PRODUTO(
IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
IDPRODUTO INT,
NOME VARCHAR(30),
VALOR_ORIGINAL FLOAT(10,2),
VALOR_ALTERADO FLOAT(10,2),
DATA DATETIME,
USUARIO VARCHAR(30),
EVENTO CHAR(1)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO JAVA',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BACKUP',100.56);

CREATE DATABASE BACKUP;

SELECT now();--------------------------------------MOSTRA A HORA--QUANDO
SELECT CURRENT_USER();--------------------------------MOSTRA QUEM ESTA LOGADO E AONDE ESTA LOGADO

DELIMITER #
CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U')
END#

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);



DELIMITER #
CREATE TRIGGER AUDIT_PROD_INSET
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'I')

END#

DELIMITER #
CREATE TRIGGER AUDIT_PROD_DEL
AFTER DELETE ON PRODUTO
FOR EACH ROW
BEGIN
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,OLD.VALOR,NOW(),CURRENT_USER(),'D');

END#

--------------------------------------------------------------------------AUTORELACIONAMENTO
CREATE TABLE CURSOS(
IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
HORAS INT,
VALOR FLOAT(10,2),
ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);


INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',10,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BI',55,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'C#',110,900.00,2);
INSERT INTO CURSOS VALUES(NULL,'PROGRAMAÇÃO',90,559.90,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',90,559.90,4);

SELECT NOME,VALOR,HORAS,IFNULL(ID_PREEQ,"SEM PREREQ")REQUISITO
FROM  CURSOS;


-------------NOME,VALOR,HORAS E O NOME DO PRE REQUISITO DO CURSO

SELECT 
C.NOME AS CURSO,
C.VALOR AS VALOR,
C.HORA AS CARGA,
IFNULL(P.nome,"----") AS "PRERREQ"
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

SELECT 
C.NOME AS CURSO,
C.VALOR AS VALOR,
C.HORAS AS CARGA,
IFNULL(P.nome,"----") AS "PRERREQ"
FROM CURSOS C LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

CREATE TABLE EMPRESA(
IDCARGO INT PRIMARY KEY aUTO_INCREMENT,
NOME VARCHAR(30),
SALARIO FLOAT (10.2),
ID_CARGO INT
);

INSERT INTO EMPRESA VALUES(NULL,'ASSISTENTE JR',1500.00,NULL);

SELECT
C.NOME AS "CARGO",
P.SALARIO,
C.SALARIO,
IFNULL(C.NOME,"---") AS "PREREQ"
FROM EMPRESA C
JOIN EMPRESA P
ON C.IDCARGO=P.ID_CARG

------------------------------------------------------CURSORES
CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(50),
JAN INT,
FEV INT,
MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'LENADRO',32456,8888,84848);
INSERT INTO VENDEDORES VALUES(NULL,'ERIKA',87849,155151,766262);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',55585,22323,77777);
INSERT INTO VENDEDORES VALUES(NULL,'PAULO',248,88151588,11213);
INSERT INTO VENDEDORES VALUES(NULL,'GUILHERME',4545,2525,9874);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',255481,11515,44151);

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES; --------------------MOSTRA OS VALORES SOMADOS EM UMA COLUNA 'TOTAL'
SELECT NOME, (JAN+FEV+MAR) AS TOTAL,(JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(50),
JAN INT,
FEV INT,
MAR INT,
TOTAL INT,
MEDIA INT
);

DELIMITER #
 CREATE PROCEDURE INSEREDADOS()
 BEGIN
 DECLARE FIM INT DEFAULT 0;
 DECLARE VAR1 ,VAR2, VAR3, VTOTAL,VMEDIA INT;
 DECLARE VNOME VARCHAR(50);
 
 DECLARE REG CURSOR FOR(
 SELECT NOME, JAN,FEV,MAR FROM VENDEDORES
  
 );
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM =1;
 
 OPEN REG;
 
 REPEAT 
 FETCH REG INTO VNOME,VAR1,VAR2,VAR3;
 IF NOT FIM THEN 
 SET VTOTAL = VAR1+VAR2+VAR3;
 SET VMEDIA = VTOTAL /3;
 
 INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
 
 END IF;
 
 UNTIL FIM END REPEAT;
 CLOSE REG;
 END#
 
 CALL INSEREDADOS();

----------------------------------PRIMEIRA FORMA
ATOMICIDADE -UM CAMPO NÃO PODE SER DIVISIVEL
UM CAMO NÃO PODE SER VETORIZADO
PK CHAVE PRIMARIA

----------------------------------SEGUNDA E TERCEIRA FORMAS NORMAIS
/* 2 FN TOTALIDADE  CAMPOS NÃO CHAVE, TEM QUE DEPENDER DA TOTALIDADE DA CHAVE
 3 FN, DEPENDENCIA TRASITIVA QUE NÃO DEPENDE SÓ DAS NÃO CHAVES */
 
CREATE DATABASE CONSULTORIO;

USE CONSULTORIO;

CREATE TABLE PACIENTE(
IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
SEXO CHAR(1),
EMAIL VARCHAR(30),
NASCIMENTO DATE

);

CREATE TABLE MEDICO(
IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
SEXO CHAR(1),
ESPECIALIDADE VARCHAR(30),
FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(30),
BAIRRO VARCHAR(30),
CIDADE VARCHAR(30),
ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
ID_PACIENTE INT,
ID_MEDICO int,
ID_HOSPITAL INT,
DATA DATETIME,
DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
ENTRADA DATETIME,
QUARTO INT,
SAIDA DATETIME,
OBSERVACOES VARCHAR(50),
ID_CONSULTA INT UNIQUE
);


/* CRIANDO AS CONSTRAINTS - CORREÇÃO-- COD DO OBJ (PK, FK) _ TABELA PERENCENTE _ TABELA DE ONDE VEM */

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE HOSPITAL ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY (ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNAÇÃO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);



























----------------------- SQL SERVER 

/* ASSUNTO -DELIMITADOR
;
*/
CREATE DATABSE AULA_SQL

/* A CLASULA GO, ELE SERVE PARA QUEBRAR OS PACOTES DE DADOS OU SEJA EXECUTA MUITOS COMANDOS DE UMA VEZ*/
/* MDF ARQUIVOS LDF E MDF, MASTER DATA FILE -DADOS
   LDF LOG DATA FIKE -LOG
   NDF
   
   
   /*ORGANIAR FISICAMENTE E LOGICAMENTE UM BANCO DE DADOS
   1- CRIAR O BANCO COM ARQUIVOS PARA OS SETORES MRK E VENDAS
   2- CRIAR UM ARQUIVO GERAL
   3- DEIXAR O MDF APENAS COM O DICIONARIO DE DADOS
   4- CRIAR 2 GRUPOS DE ARQUIVOS (PRIMARY -MDF)*/
   
   ------------CODIGOS
   
   CREATE TABLE ALUNO(
   IDALUNO INT PRIMARY KEY IDENTITY,
   NOME VARCHAR(30) NOT NULL,
   SEXO CHAR(1) NOT NULL,
   NASCIMENTO DATE NOT NULL,
   EMIAL VARCHAR(30) UNIQUE
   )
   GO
   
   /*CONSTRAINTS */
    ALTER TABLE ALUNO
   ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F'))
   GO
   
   /* 1X 1*/.
   
   CREATE TABLE ENDERECO(
   IDENDERECO INT PRIMARY KEY IDENTITY (100,10),
   BAIRRO VARCHAR(30),
   UF CHAR(2) NOT NULL,
   CHECK (UF IN('RJ','SP','MG')),
   ID_ALUNO INT UNIQUE
   
   )
GO

/* CRIANDO A FK */

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY (ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO


/* COMANDOS DE DESCRICAO */
DESC, SHOW CREATE table

/*PROCEDURES- JA CRIADAS E ARMAZENADAS NO SISTEMA */

SP_STOREGE PROCEDURE
SP_COLUMNS ALUNO = É QUE NEM O "NESC"
GO
SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE','M','1981/12/09','ANDRE@GMAIL.COM')
INSERT INTO ALUNO VALUES('LEANDRO','M','1990/01/23','LEANDRO@GMAIL.COM')
INSERT INTO ALUNO VALUES('ALINE','F','2002/12/09','ALINE@GMAIL.COM')
INSERT INTO ALUNO VALUES('GRACIELE','F','2000/09/09','GRACIELE@GMAIL.COM')
INSERT INTO ALUNO VALUES('CARLOS','M','1972/07/03','CARLOS@GMAIL.COM')
GO

/* ENDEREÇO */

INSERT INTO ENDERECO VALUES('INTERLAGOS','SP',1)
INSERT INTO ENDERECO VALUES('COPA CABANA','RJ',4)
INSERT INTO ENDERECO VALUES('CENTRO','MG',5)
INSERT INTO ENDERECO VALUES('ANGELA','SP',2)
INSERT INTO ENDERECO VALUES('FLUMINENSE','RJ',3)
GO

/*CRANDO A TABELA TELEFONES 1XN*/

CREATE TABLE TELEFONE(
 IDTELEFONE INT PRIMARY KEY IDENTITY,
 TIPO CHAR(3) NOT NULL,
 NUMERO VARCHAR(10) NOT NULL,
 ID_ALUNO INT,
 CHECK (TIPO IN ('RES','COM','CEL'))
)
GO

INSERT INTO TELEFONE VALUES('CEL',78912365,1)
INSERT INTO TELEFONE VALUES('COM',78952541,1)
INSERT INTO TELEFONE VALUES('CEL',52879524,4)
INSERT INTO TELEFONE VALUES('RES',58331678,4)
INSERT INTO TELEFONE VALUES('COM',20587864,4)
INSERT INTO TELEFONE VALUES('COM',98974523,5)
INSERT INTO TELEFONE VALUES('COM',45558778,3)
INSERT INTO TELEFONE VALUES('RES',58777444,2)
INSERT INTO TELEFONE VALUES('CEL',63987542,2)
INSERT INTO TELEFONE VALUES('RES',10202058,1)
GO

/* PEGAR A DATA ATUAL */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA */

SELECT A.NOME,T.TIPO,T.NUMERO,E.BAIRRO,E.UF
FROM ALUNO A
JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO



/* IFNULL */

SELECT A.NOME,
       ISNULL(T.TIPO, 'SEM')AS "TIPO",
	   ISNULL(T.NUMERO,'NUMERO') AS "TELEFONE",
	   E.BAIRRO,
	   E.UF
FROM ALUNO A
JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/*DATAS
DATEDIF- CALCULA A DIFERENÇA ENTRE 2 DATAS*/
SELECT NOME, GETDATE() FROM ALUNO
GO

/*FUNCAO GETDATE() TRAZ DIA E HORA

/* 1 PASSO*/

SELECT NOME,DATEDIFF(DAY,NASCIMENTO,GETDATE())
FROM ALUNO
GO

/*2 PASSO*/
SELECT NOME,DATEDIFF(DAY,NASCIMENTO,GETDATE())
FROM ALUNO
GO
/* 3 PASSO RETORNO EM INTEIRO+ OPER MATEMATICA*/
SELECT NOME,(DATEDIFF(DAY,NASCIMENTO,GETDATE())/365) AS "IDADE"
FROM ALUNO
GO
/* EM MESES*/
SELECT NOME,(DATEDIFF(MONTH,NASCIMENTO,GETDATE())/12) AS "IDADE"
FROM ALUNO
GO

/* EM ANO*/
SELECT NOME,(DATEDIFF(YEAR,NASCIMENTO,GETDATE()) AS "IDADE"
FROM ALUNO
GO
 SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
 FROM ALUNO 
 GO
 /* DETEPART - POREM O RETORNO É UM INTEIRO*/
  SELECT NOME, DATEPART(MONTH,NASCIMENTO)
 FROM ALUNO 
 GO
 
 /* DATENAME -TRAZ O NOME DA PARTE DA DATA EM QUESTAO - STRING*/
 
 SELECT NOME, DATENAME(MONTH,NASCIMENTO)
 FROM ALUNO
 GO
 
 SELECT NOME, DATENAME(WEEKDAY,NASCIMENTO)---DIA DA SEMANA
 FROM ALUNO
 GO
 
  SELECT NOME, DATENAME(WEEKDAY,NASCIMENTO),DATENAME(MONTH,NASCIMENTO)
 FROM ALUNO
 GO
 
 /* DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA*/
 SELECT DATEADD(DAY,365,GETDATE()) ----DIA
 
  SELECT DATEADD(YEAR,10,GETDATE())---ANO
  
  
  /*FUNCOES DE CONVERSAO DE DADOS*/
  
  SELECT CAST('1' AS INT) + CAST('1' AS INT)
  GO
  
 SELECT NOME,
DAY(NASCIMENTO) + '/' + MONTH(NASCIMENTO)+ '/' + YEAR(NASCIMENTO)
FROM ALUNO 
GO


SELECT NOME,
CAST (DAY(NASCIMENTO) AS VARCHAR) + '/' + ------------O CAST SERVE PARA CONVERTER, DEPOIS DO 
'AS' COLOCAMOS SE É STRING OU INT
CAST (MONTH(NASCIMENTO) AS VARCHAR)+ '/' +
CAST (YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO"
FROM ALUNO 
GO
GO

/*CHARINDEX - RETORNA UM INTEIRO
CONTAGEM DEFAULT -INICIA EM 01
*/


SELECT NOME,CHARINDEX('A',NOME) AS INDICE
FROM ALUNO
GO

SELECT NOME,CHARINDEX('A',NOME,2) AS INDICE
FROM ALUNO
GO